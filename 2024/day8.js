function countAntinode(input, iterDown, iterUp) {
  const width = input[0].length;
  const height = input.length;

  const grouped = {};
  for (let y = 0; y < height; y++) {
    const line = input[y];
    for (let x = 0; x < width; x++) {
      const char = line[x];
      if (char === '.') continue;
      grouped[char] = grouped[char] || [];
      grouped[char].push(y * width + x);
    }
  }

  const antinodes = new Set();
  Object.values(grouped).forEach(group => {
    if (group.length < 2) return;
    for (let i = 0; i < group.length - 1; i++) {
      const xi = group[i] % width;
      const yi = Math.trunc(group[i] / width);
      for (let j = i + 1; j < group.length; j++) {
        const xj = group[j] % width;
        const yj = Math.trunc(group[j] / width);
        for (const t of iterDown()) {
          const xt = (1 - t) * xi + t * xj;
          const yt = (1 - t) * yi + t * yj;
          if (xt >= 0 && xt < width && yt >= 0 && yt < height) {
            antinodes.add(yt * width + xt);
          } else {
            break;
          }
        }
        for (const t of iterUp()) {
          const xt = (1 - t) * xi + t * xj;
          const yt = (1 - t) * yi + t * yj;
          if (xt >= 0 && xt < width && yt >= 0 && yt < height) {
            antinodes.add(yt * width + xt);
          } else {
            break;
          }
        }
      }
    }
  });

  return antinodes.size;
}

function* countDownFrom(n) {
  while (true) {
    yield n;
    n--;
  }
}

function* countUpFrom(n) {
  while (true) {
    yield n;
    n++;
  }
}

const test = `
....................8.D.........Y...........c.....
....f.............D......O...........Y............
.......z..........7.N..........g..................
..........h...........9g.7....................Y...
.............8...............................c....
...9..8...............L........D....O.....l.......
..........f.9.......h.........................l...
...z...B..........................................
.................M.....C.....OR7.Y..g..........l..
........................M.......N.................
...............h..................TD....H.........
......z......M........C8.......N.......m.T........
......O.......................................A...
...........a...........h..........................
................B..................j..............
..............v..f..........g.....................
.......N..........s.M.........n..............Q....
...............s.........j.......................A
......................a......................T...b
........s....v......H..c..............j..i....m...
.......................a........2H.......m..V.....
................n.B..........o.....H......2.......
.....3.......s.B..............x......S..K.........
.3.G..................J................V...l.x..T.
....3.......................E..................V..
3..........................E..........V...i.......
...............v.......n.E...................2.i..
..F.........r.e......n....E...........A..Q.....K..
..z................................A....Q.........
.................................b..Q...d.Sw......
..G...0..e............v.......Z...j.....m...b.....
..y.............0.a.............................K.
.............Gp....Z.................4......S.....
....oJ....G........e.........Z............b.X.....
C........o.r........WL..1.......X........K.....d..
..................Z1.....r...............F........
............L.4................1.6..............tF
...y...............L......1............26.t.......
......e.k......y........I......x......d........t.R
.......0.........k...............d.........tWR..x.
..........q.....r......J..................F..P..w.
..........................5..........XwW..........
...........0....y.............J.............6p....
..q...k.......................I.....4........SR...
.........q..o.......P................W............
.............q.IP..............................p..
.....k...................w.............X.......f..
.............P...............4..................p.
.................I..........5.....................
.C.................................5...6..........
`
  .trim()
  .split('\n');

console.log(countAntinode(test, () => [-1], () => [2]));
console.log(countAntinode(test, () => countDownFrom(0), () => countUpFrom(1)));
