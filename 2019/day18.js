/* eslint-disable no-labels */

const OFFSETS = [
  [0, -1],
  [1, 0],
  [0, 1],
  [-1, 0]
]

function shortestPath (input) {
  const graph = {}
  const initialState = []
  input.forEach((row, y) => {
    row.forEach((v, x) => {
      if (/[a-z@]/.test(v)) {
        if (v === '@') {
          v = initialState.length
          initialState.push(v)
        }
        graph[v] = bfs(x, y)
      }
    })
  })

  let min = Infinity
  const memo = {}

  const unvisited = []
  unvisited.push([['@'], 0, initialState])

  while (unvisited.length > 0) {
    const [order, steps, state] = unvisited.pop()
    const key = order.filter(v => !state.includes(v)).sort().concat(state)
    if (steps >= memo[key]) continue
    else memo[key] = steps
    if (order.length - 1 === Object.keys(graph).length - initialState.length) {
      if (steps < min) min = steps
      continue
    }
    // console.log(state)
    const candidates = []
    state.forEach((curr, i) => {
      graph[curr]
        .filter(node => !order.includes(node[0]) && node[2].every(dep => order.includes(dep)))
        .forEach(node => {
          const updatedState = [...state]
          updatedState[i] = node[0]
          candidates.push([order.concat(node[0]), steps + node[1], updatedState])
        })
    })
    candidates.sort((a, b) => a[1] - b[1])
    while (candidates.length > 0) unvisited.push(candidates.pop())
  }

  return min

  function bfs (...origin) {
    const output = []
    const visited = {}
    const unvisited = []
    unvisited.push([...origin, 0, []])
    while (unvisited.length > 0) {
      const [x, y, steps, dep] = unvisited.shift()
      const key = [x, y]
      if (key in visited) continue
      visited[key] = steps
      const v = input[y][x]
      if (v === '#') continue
      if (/[a-z]/.test(v) && steps > 0) output.push([v, steps, dep])
      const nextDep = /[a-z]/i.test(v) ? dep.concat(v.toLowerCase()) : dep
      OFFSETS.forEach(offset => {
        unvisited.push([x + offset[0], y + offset[1], steps + 1, nextDep])
      })
    }
    return output
  }
}

function updateMap (input) {
  loop: for (let y = 0; y < input.length; y++) {
    for (let x = 0; x < input[y].length; x++) {
      if (input[y][x] === '@') {
        input[y][x] = '#'
        input[y - 1][x] = '#'
        input[y + 1][x] = '#'
        input[y][x - 1] = '#'
        input[y][x + 1] = '#'
        input[y - 1][x - 1] = '@'
        input[y - 1][x + 1] = '@'
        input[y + 1][x - 1] = '@'
        input[y + 1][x + 1] = '@'
        break loop
      }
    }
  }
}

const test = `
#################################################################################
#...........#.....#.#...........#.....#.#...#...#...........#...........#......u#
###.#######.#.###.#.#.###.#######.###.#.#.#.###.#.#######.###.#####.###.###.###.#
#...#.....#.#.#.#.#.....#.#.......#...#.#.#...#.#.#.....#.........#...#...#...#.#
#.#####I#.#.#.#.#.#######.#.#######.###.#.###.#.#.#####.#############.###.#####.#
#.....#.#.#.#.#...........#.....#.#.....#...#.#.#.......#.....#.....#...#...#...#
#.###.#.#.#.#.#################.#.#####.#.#.#.#J#######.#.#.#.#.###.###.###.#.#.#
#...#.#.#.....#.....#...........#.#.....#.#.#.#...#.....#.#.#.#.#.....#.#...Y.#.#
#####.#########.###.#.###########.#.#######.#.#.#.#.#####.#H#.#.#####.#.#######.#
#...#...#.......#...#...#...#.....#.....#...#...#.#...#.#.#.#.#...#...#.....#...#
#.#.###.#.#######.#####.#.#.#.###.#####.#.#######.###.#.#.#.#####.###.###.#.#####
#.#.....#.#..k#..z......#.#.#...#.....#.#.....#.....#.#...#.#...#...#...#.#.....#
#.#####.#.#.#.###########.#####.#.#####.#.###.#######.#.###.#.#.###.###.#######.#
#.....#l#.R.#.....#.......#.....#...#...#...#.....#...#.#...#.#.....#...........#
#.###.#.#######.#.###.#.###.#######.#.#####.#####.#.#####.###.###.#############.#
#.#.#.#...#...#.#...#.#...#.#.....#.#...#.#.#.#...#...#...#...#...#...#.....#...#
#.#.#.###.#.#.#####.#.###.#.#.#.###.###.#.#.#.#.#####.#.###.#.#####.#.#.###.#.###
#...#.#...#.#.......#...#...#.#d..#.#...#..q..#...#...#...#.#.#.....#...Z.#r#.#.#
###.#.###.#V###########.#####.###.#.#.###########O#.#####.#.###.###########.#.#.#
#...#...#.#........f..#.#.....#...#.#.#.#.......#.#.#.....#.........#.......#...#
#######.#############.#.#######.###.#.#.#.#####.#.#.#.###.#########.#.#########.#
#.......#...........#.#.......#...#...#.#...#.#.#.#...#.#...#...#...#...#.#..e..#
#.#######.###.#.#############.###.#####.###.#.#.#.#####.###.###.###.###.#.#.#####
#p........#.#.#.#.......#...#...#.....#.#...#.#.#.#.......#...#.F.#...#.#...#.K.#
#.#########.#.###.#.###.#.#.###.###.#.#.#.###.#.#.#N#####.###.###.#####.#####.#.#
#...#.......#.....#...#.#.#.....#...#...#.#.......#.#...#...#...#.....#.......#.#
###.#.###.###########.###.#######.#####.#.#########.#.#####.###.#####.#####.###.#
#.#.#...#...........#.#...#.....#...S.#.#.#...#.......#...#...#.....#.....#...#.#
#.#.###########.###.#.#.###.###.#####.#.#.#.#.#.#######.#.###.#####.#####.###.#.#
#...#.........#.#...#...#...#.#.......#.#...#...#...#...#...#..x..#.#...#...#.#.#
#.###.#######.#.#########.#.#.#########.#.#######.#.#.#####.###.###.#.#####.###.#
#.....#.....#.#.......#...#.#.#.......#.#.#.......#.#.#.......#.#...#.#...#...#.#
#########.###.#.###.###.###.#.#.#####.#.#.#######.#.#.#######.#.#.###.#.#.###.#.#
#.....#...#...#.#.#.#...#...#...#..t#...#...#.....#.#.....#.....#...#...#...#..v#
#.###.#.###.###.#.#.#.###.###.#####.#######.#.#####.#####.###.#####.#####.#######
#.#.....#...#.....#.....#.#...........#.#...#.#...#.#...#...#.#...#.....#.......#
#.#######.#######.#####.#.###########.#.#.###.#.###.#.#.###.###.#.#####.#####.#.#
#.......#.#.....#.#...#.#.......#.#...#.#.....#...#...#...#.....#.....#.#...#.#.#
#.#####.#.#X###.###.#.#########.#.#.###.#######.#.#######.###########.#.#.#P###.#
#.....#.....#.......#...........#...............#.........T....g....#.....#.....#
#######################################.@.#######################################
#..y#...#.................#...#...................#.....#.........#.....#...#...#
#.###.#.#.#########.#.#####E#.#####.#.#.#.###.#####.###.###.#.###.###.#.#.#.#.#.#
#.#...#...#...#.#.U.#.#.....#.#...#.#.#.#.#.#...#...#.#...#.#...#.#...#.#.#.#.#.#
#.#.#######.#.#.#.#####.#####.#.#.###.#.#.#.###.#.###.###.#####.#.#.###.#A#.#.#.#
#.#...#...C.#...#.........#..a#.#...#.#.#.....#...#.#...#.#.....#.#.#...#.#b..#.#
#.###.#.#######.###########.###.###.#.#.#####.#####.#.#.#.#.#####.#.#.###.#####.#
#.....#.#.......#.#...B...#.#...#.#...#.#.#...#...#...#.#.#.#...#...#...#.#.....#
#.#####.#.#######.#.#####.#.#.#.#.#####.#.#.###.#.#####.#.#.#.#.#######.#.#.#####
#.W.....#.#...#...#...#...#.#.#.#.....#.#.#.....#.......#.#...#.#.....#...#...#.#
#########.#.#.###.###.#.###.#.#.#.#.###.#.#############.#.###.#.###.#.#.#####.#.#
#.......#...#...#.#...#.#...#.#.#.#.....#.....#.......#.#...#.#...#.#.#.#...#...#
#####.#.#######.#.#.###.###.#.#.#.#######.#####.#.#####.###.#.###.###.#.#.#.###.#
#.....#.......#.#.#.#...#...#.#.#.....#.#.....#.#.........#.#.#.#...#...#.#c#...#
#.#########.###.#.#.###.#.#####.#####.#.#.###.#.###########.#.#.###.#.###.#.#####
#.#.....#...#...#.#...#...#.G.#.#...#.#.#...#...#...#...#...#...#.#.#...#.#.....#
#.#.#####.###.###.###.#####.#.#.#.#.#.#.###.#####.###.#.#.#####.#.#.#####.#####.#
#.#.....#...#.#.....#.#.....#...#.#.#.#.#.#...#.....#.#...#...#...#..w......#.#.#
#.#.###.###.#.###.###.###.#########.#.#.#.###.#.###.#.###.#.#.###.#########.#.#.#
#.#...#...#.#...#.#...#...#.........#.#.#...#.#.#.#.#.#...#.#...#.#...#...#...#.#
#.#######.#.###.#.#.###.#######.#####.#.#.#.#.#.#.#.#.#####.###.###.#.#.#.#####.#
#.......#.#.#...#.#...#.#.......#.....#.#.#.#.#...#.#...#...#.#.....#...#...#...#
#.#####.#.#.#.###.#####.###.#.###.#####.#.#.#.#####.###.#.###.#######.#####.#.#.#
#.#...#.#...#.#...#.....#...#.#...#.....#.#.#.....#...#...#...#.....#.....#.#.#.#
#.#.#.#.#####.#.#.#.#####.###.#.#####.#.#.#######.###.#####.###.###.#######.#.###
#.#.#...#.....#.#...#...#...#.#....s..#.#.....#...#.....#...#...#.........#.#...#
#.#.###.#.#####.#####.#.#.#.#.#########.#.###.#.###.###.#.###.#.#########.#.###.#
#.#..m#.#.....#...#...#...#.#.#.......#.#.#.#.#.#...#...#...#.#.#...#...#...#..i#
#.###.#######.#.#.#.#######.#.#####.#.#.#.#.#.#.#.###.#####.#.###.#.#.#######.#.#
#...#.........#.#.#.......#.#...#...#.#.#.#.#...#.#...#...#.#.....#.#.......#.#.#
###.#############.#######.#.###.#.#.###.#.#.#####.#.###.#.#.#.#####Q###.###M#.###
#...#.....#.......#..j#...#.#.....#.#...#...#.....#...#.#.#.#.#.....#...#...#...#
#.#####.#.###.#######.#.###.#########.#####.#.#.#####.#.#.#.###.#####.###.###.#.#
#...#...#.....#.....#...#.#.......#...#.#...#.#.#...#.#.#.#.....#.....#.#.#...#.#
###.#.#########.###.#.###.#######.#.###.#.#####.#.#.#.#.###########.###.#.#####.#
#.#.#.............#.#.#.....#....o#.#...#.......#.#.#.#...#.......#.#..h#...#...#
#.#.###############.#.#####.#.###.#.###.###########.#.#.#.#.###.#.#.#.#.###.#.###
#.#...#.........#...#.......#.#...#.D...#...#.......#.#.#...#...#...#.#...#.#...#
#.###.#.#######.#.#########.#.#########.#.#.#.###.###.#######.#######.#.###.###L#
#.......#.........#.........#..........n#.#.....#.............#.......#.........#
#################################################################################
`.trim().split('\n').map(line => line.split(''))

console.log(shortestPath(test))
updateMap(test)
console.log(shortestPath(test))
