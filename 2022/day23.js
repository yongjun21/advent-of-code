const DIRECTION = {
  NW: [-1, -1],
  N: [0, -1],
  NE: [1, -1],
  E: [1, 0],
  SE: [1, 1],
  S: [0, 1],
  SW: [-1, 1],
  W: [-1, 0]
}

const DECISIONS = [
  { input: ['NW', 'N', 'NE'], output: 'N' },
  { input: ['SW', 'S', 'SE'], output: 'S' },
  { input: ['NW', 'W', 'SW'], output: 'W' },
  { input: ['NE', 'E', 'SE'], output: 'E' }
]

function countEmptyGroundTiles (input, rounds = Infinity) {
  let index = 0

  const state = new Map()
  for (let y = 0; y < input.length; y++) {
    for (let x = 0; x < input[0].length; x++) {
      if (input[y][x] === '#') state.set(`${x},${y}`, [x, y])
    }
  }

  while (rounds-- > 0) {
    const proposed = new Map()
    for (const coord of state.values()) {
      const canSkip = Object.values(DIRECTION).every(offset => {
        const key = `${coord[0] + offset[0]},${coord[1] + offset[1]}`
        return !state.has(key)
      })
      if (canSkip) continue

      for (let i = index; i < index + DECISIONS.length; i++) {
        const decision = DECISIONS[i % DECISIONS.length]
        const canPropose = decision.input.every(direction => {
          const offset = DIRECTION[direction]
          const key = `${coord[0] + offset[0]},${coord[1] + offset[1]}`
          return !state.has(key)
        })
        if (canPropose) {
          const offset = DIRECTION[decision.output]
          const nextX = coord[0] + offset[0]
          const nextY = coord[1] + offset[1]
          const key = `${nextX},${nextY}`
          if (proposed.has(key)) proposed.set(key, null)
          else proposed.set(key, [`${coord[0]},${coord[1]}`, key, [nextX, nextY]])
          break
        }
      }
    }
    index++
    if (proposed.size === 0) break
    for (const move of proposed.values()) {
      if (move == null) continue
      state.delete(move[0])
      state.set(move[1], move[2])
    }
  }

  const bbox = [Infinity, Infinity, -Infinity, -Infinity]
  for (const coord of state.values()) {
    if (coord[0] < bbox[0]) bbox[0] = coord[0]
    if (coord[1] < bbox[1]) bbox[1] = coord[1]
    if (coord[0] > bbox[2]) bbox[2] = coord[0]
    if (coord[1] > bbox[3]) bbox[3] = coord[1]
  }

  return [(bbox[2] - bbox[0] + 1) * (bbox[3] - bbox[1] + 1) - state.size, index]
}

const test = `
..#.#.....#.#...#.#.###.#######.#.#..###.#.##..###.##..###.#...##.##....#
.#....#.#.###.#...#.#.#..#.###........#.#####.##........#..#...##..#.....
##..#...#.....#######.##..#..##.#..#.##...#.#.##......#...#.##.###.....#.
#.###.#..#...#..#####.#..#.##..#...####..#..#.##....###.#.##.#.####...##.
.#.##.###..#.##..#.#####.#.#.##.###.###......#..#...#.##.#.....#.##..#.#.
#....##.####.##..##.##.....#...##.##....###.#.#..##.#.#..####......##.##.
.....###.#..##.......######..###.###..##..#####.#.##.####.##...#.#.###.##
....#.####.#..##.####.#..#.#.#.##......###..##.#..##.#..##.###.##..#..#..
##.#.#######.#.#####...##..###.#.#.#.##..#......##...###.#.#.#####.#..#.#
#.#.####...#####.##..#.#...##..#.####..##..###....#.#.#####.#.###...#.#.#
.....#.#.#####...##............###...#..##..#.....#########.#.#.#####..##
.###.#...##.#.#....###.#..#..#....#...#.##.#...#.###.#..######.#.#.##...#
..#..#........#..#.##.#.#.#.#...###.##.#..###.#.#..#..#..#....##.###.##..
##..#.#..#...##...#.............######.#.##...####.##.####.#.########..#.
..#..##.##..#.##...#.....###.###.#..##.#.#...#....######..#...####..###.#
#####..##......#..#.#.###.#....##...#####...###.....#..#..#..##...#..##..
#..###..#..###...#......##.....#...###.....##.....##..#.....#...#........
######.......##.##.###.#...####...####.#.##.#..#.#.#...#.......#...##.#.#
#.#..#.####.......###...#..####....#.##.##.....##.#.###.#...#..##.####.#.
#..#.#..##.##....##.#.....##.#..####..#..#.#....#...#.#.#..#.###.#....##.
..#..###...#..##.#....##.....#####..#..#..#.#.#.#....#.##..#####.###..#.#
#.##.#..##..####...#.#.####...##.#.##.##.#...#.#.###..#...#.#.#######.#..
.#.#.##......#####.#..####.....#..#####.###.#..###.##...#..#.#....##.####
###.##.#.##...#..####..#..#.#...####.#####..#.###.##.##...###..###.###.#.
.#.###.#.##...##.....###.#.###..#.#...#.....##...###.#..####.##.#..#..##.
##.#.....#..##..#####...##..####..##.#####.#.##...###......##.##....##...
.#..###.#.##.###..#....##.##...##..#.###...#.######.###....#.##.###.#####
####.######.##...#.....#.#.#.#######.##..##..#.#####..#######.######..#..
#..#.#.##..###.#####.###.#.##..#.#....##.#..##......#.####.##..#.####..##
.##..##..#.###...#####.###.####.###..######.##.#....###...#.#..####...#..
.#######..###.###..###...#.####...#...#...#.#...#.#...#....#.#...#....##.
####.#..###.#.#.#.###..##..#.#....###...#...#......#...#.###.#..###..##.#
#.#.#...#######..##.#.#.#...########.#.##...#.##.##...####...##.##.#..###
#...#####...##...####.#.#.#.####....#.##.###.##.#.###..##.#.##..#.#..##.#
##.#.#.##..#..#...##..#.#..#.#.#.#..###.#.####.##..#####.#...#.##..###.##
.#.#...##.##.#..#.##....##.###.#....#..#...##..#.##..##..#..#.#..#..##...
.####.###..#...###.#..#.##..#.....##..##..##..#.#..#.#.#...###...#....###
.###..#...##.####..#...#..#......#..#...##...##.##.##..#.##.........#...#
.....##..##.#..#..####.#.####..#..##..#..##..#.#..###.#.#.#...###.....#.#
.....##.##.####...#.###...###...####....#.##.######.#..#....#.##.#.##.#..
###..##.#.....#...#.#.....###..###...##.#..###..######.....##.#...#.####.
##.#####.#.#.##.#.....#.##....##.#######.##.#..#...#.......#####.#..##.##
.##.###.#..##.#...#..#...##.##.#..#.##...##.####.#......#..####.....#..#.
.######.###.###.#..##.....#..#..#..#.#.#.###.##.#....#####.#..####......#
.####.#....##.#...#....#.#..#..#.####.#.#####..##..#.####..#.####.##.####
##....#.#.#####.######..###.###....###..#.####.#.#.##..##..###.....#..###
.#...##.#...#......#.#.#..###...###.#..#..###..########.##...#.#.#..#.#..
##..#.##.#.#..#.#....###...########.#.###.####...###..###.#....##..#.####
#.#.##.#.#....##..#.....##...#.#.###.##....#..##....#..####.##.###..##...
#..#.#.#.####.###.#..###.#...##.##....##.###....#..##.....###..#####.####
#.#.####...##.##..###....###..........#.###########..##..#...#.#.#..##.#.
.#..#.#.#######.###.###....#.##..#.#..##..##..#.#..##.#.##..#####.##.##..
..#.###.#.#.###.##.#..#.#.##.#.##.#.#...##.##.##.#...##...#.#.#.##.#.....
.#...#...#.##..##.##.#.##.#...#..########..####.#...#.###..###.#.####....
##.##....###.#.#....#.####..#.#.#.#.......#...#.#.##...##.##.#.#.#####.##
#..##########.###..#.##.###....#..#.#.##..#.#....#########.#..#.#.##..##.
####.####.#....#...#..#..###.###...#...##..##.##.###.###..####....###..##
.##.#...####..##.###.##..###..#..###.###.##...#..#......#.###..#.#.#.#..#
##.##.##.###.#..###..##.#.##.##....#.###.#####.####.###...#.#.#.######..#
....#..#.####.##...#.#####.....#####.#######.##..#.###..###...####.#...##
##.....##.#..####..####..#.#.#..#.#.##..#...###..#..#..#.##.#...#####.#.#
########.#....##.##.#.#.#.#.#..#..#.##...#......#.##.#.#.###......#....##
...#.####.#..#.#..#..#..##...#.....#############.##.#..###.......###.##.#
....#.#..#.#.##.#.#######.######...#..#..#..###.####..######.####.###..#.
..####.#...#..#.###.###...###..#.#...#.#..##.#####......#..#.########....
##.#.##..#.....#.....#.###..#..#.#.#.#.##.##..#.#..#.###.#..#....##...###
#.###...###.#..#.##.....###.....#.##..#.....#..##..#.##.#.#.#..#..#...#..
#.#..##..#.##....#..##.#.#.#.####.####.#.....###.#..#..##..##.###..##.#.#
#.#.##...#...##..#.###.#..##.##.....#.#..######....#....#.###.#.##....#.#
#.......##.##..#####.#..#.#.##.#.######...#....##.##...#...#.#.#.##.###..
##..#.##..#.#......#####....#..###..#.#.#....##.##.##....#..####...#.#.#.
.#.###.#..#####.##.###.#..#....###.##...#.#...##.#...##...#..###..#.#.###
#....#...#..#..##.##.##...####.#.#.#...#.#.#.##.#...#.##.........#.##.#..
`.trim().split('\n')

console.log(countEmptyGroundTiles(test, 10)[0])
console.log(countEmptyGroundTiles(test)[1])
